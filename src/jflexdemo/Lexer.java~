/* The following code was generated by JFlex 1.6.1 */

package jflexdemo; 
import java.util.ArrayList;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Automata/java-lexical-analyzer/src/jflexdemo/description.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FIRST = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\1\40\1\40\1\2\22\0\1\37\1\0\1\32\5\0"+
    "\2\36\1\23\1\21\1\0\1\22\1\0\1\24\1\31\1\35\10\31"+
    "\1\0\1\34\1\26\1\25\1\26\2\0\32\30\4\0\1\33\1\0"+
    "\1\20\2\30\1\13\1\7\1\4\1\30\1\6\1\3\2\30\1\11"+
    "\1\30\1\10\1\15\1\16\1\30\1\17\1\12\1\5\2\30\1\14"+
    "\3\30\12\0\1\40\44\0\1\33\12\0\1\33\4\0\1\33\5\0"+
    "\27\33\1\0\37\33\1\0\u01ca\33\4\0\14\33\16\0\5\33\7\0"+
    "\1\33\1\0\1\33\21\0\165\33\1\0\2\33\2\0\4\33\1\0"+
    "\1\33\6\0\1\33\1\0\3\33\1\0\1\33\1\0\24\33\1\0"+
    "\123\33\1\0\213\33\1\0\255\33\1\0\46\33\2\0\1\33\7\0"+
    "\47\33\11\0\55\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0"+
    "\1\33\10\0\33\33\5\0\3\33\35\0\13\33\5\0\100\33\12\27"+
    "\4\0\146\33\1\0\10\33\2\0\12\33\1\0\6\33\12\27\3\33"+
    "\2\0\1\33\20\0\73\33\2\0\145\33\16\0\12\27\54\33\4\0"+
    "\1\33\5\0\56\33\22\0\34\33\104\0\23\33\61\0\200\33\2\0"+
    "\12\27\1\0\23\33\1\0\10\33\2\0\2\33\2\0\26\33\1\0"+
    "\7\33\1\0\1\33\3\0\4\33\2\0\11\33\2\0\2\33\2\0"+
    "\4\33\10\0\1\33\4\0\2\33\1\0\5\33\2\0\12\27\2\33"+
    "\17\0\3\33\1\0\6\33\4\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\2\33\1\0\2\33\1\0\2\33\2\0\1\33\1\0\5\33"+
    "\4\0\2\33\2\0\3\33\3\0\1\33\7\0\4\33\1\0\1\33"+
    "\7\0\12\27\6\33\13\0\3\33\1\0\11\33\1\0\3\33\1\0"+
    "\26\33\1\0\7\33\1\0\2\33\1\0\5\33\2\0\12\33\1\0"+
    "\3\33\1\0\3\33\2\0\1\33\17\0\4\33\2\0\12\27\21\0"+
    "\3\33\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0"+
    "\2\33\1\0\5\33\2\0\11\33\2\0\2\33\2\0\3\33\10\0"+
    "\2\33\4\0\2\33\1\0\5\33\2\0\12\27\1\0\1\33\20\0"+
    "\2\33\1\0\6\33\3\0\3\33\1\0\4\33\3\0\2\33\1\0"+
    "\1\33\1\0\2\33\3\0\2\33\3\0\3\33\3\0\14\33\4\0"+
    "\5\33\3\0\3\33\1\0\4\33\2\0\1\33\6\0\1\33\16\0"+
    "\12\27\20\0\4\33\1\0\10\33\1\0\3\33\1\0\27\33\1\0"+
    "\20\33\3\0\10\33\1\0\3\33\1\0\4\33\7\0\2\33\1\0"+
    "\2\33\6\0\4\33\2\0\12\27\21\0\3\33\1\0\10\33\1\0"+
    "\3\33\1\0\27\33\1\0\12\33\1\0\5\33\2\0\11\33\1\0"+
    "\3\33\1\0\4\33\7\0\2\33\7\0\1\33\1\0\4\33\2\0"+
    "\12\27\1\0\2\33\16\0\3\33\1\0\10\33\1\0\3\33\1\0"+
    "\51\33\2\0\10\33\1\0\3\33\1\0\5\33\10\0\1\33\10\0"+
    "\4\33\2\0\12\27\12\0\6\33\2\0\2\33\1\0\22\33\3\0"+
    "\30\33\1\0\11\33\1\0\1\33\2\0\7\33\3\0\1\33\4\0"+
    "\6\33\1\0\1\33\1\0\10\33\6\0\12\27\2\0\2\33\15\0"+
    "\72\33\5\0\17\33\1\0\12\27\47\0\2\33\1\0\1\33\2\0"+
    "\2\33\1\0\1\33\2\0\1\33\6\0\4\33\1\0\7\33\1\0"+
    "\3\33\1\0\1\33\1\0\1\33\2\0\2\33\1\0\15\33\1\0"+
    "\3\33\2\0\5\33\1\0\1\33\1\0\6\33\2\0\12\27\2\0"+
    "\4\33\40\0\1\33\27\0\2\33\6\0\12\27\13\0\1\33\1\0"+
    "\1\33\1\0\1\33\4\0\12\33\1\0\44\33\4\0\24\33\1\0"+
    "\22\33\1\0\44\33\11\0\1\33\71\0\100\33\12\27\6\0\100\33"+
    "\12\27\4\33\2\0\46\33\1\0\1\33\5\0\1\33\2\0\53\33"+
    "\1\0\u014d\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33"+
    "\2\0\51\33\1\0\4\33\2\0\41\33\1\0\4\33\2\0\7\33"+
    "\1\0\1\33\1\0\4\33\2\0\17\33\1\0\71\33\1\0\4\33"+
    "\2\0\103\33\2\0\3\33\40\0\20\33\20\0\125\33\14\0\u026c\33"+
    "\2\0\21\33\1\0\32\33\5\0\113\33\3\0\13\33\7\0\15\33"+
    "\1\0\7\33\13\0\25\33\13\0\24\33\14\0\15\33\1\0\3\33"+
    "\1\0\2\33\14\0\124\33\3\0\1\33\4\0\2\33\2\0\12\27"+
    "\41\0\3\33\2\0\12\27\6\0\130\33\10\0\53\33\5\0\106\33"+
    "\12\0\37\33\1\0\14\33\4\0\14\33\12\0\12\27\36\33\2\0"+
    "\5\33\13\0\54\33\4\0\32\33\6\0\12\27\46\0\34\33\4\0"+
    "\77\33\1\0\35\33\2\0\1\33\12\27\6\0\12\27\15\0\1\33"+
    "\10\0\17\33\101\0\114\33\4\0\12\27\21\0\11\33\14\0\60\33"+
    "\12\27\72\33\14\0\70\33\10\0\12\27\3\0\3\33\12\27\44\33"+
    "\122\0\3\33\1\0\43\33\1\0\2\33\6\0\366\33\6\0\u011a\33"+
    "\2\0\6\33\2\0\46\33\2\0\6\33\2\0\10\33\1\0\1\33"+
    "\1\0\1\33\1\0\1\33\1\0\37\33\2\0\65\33\1\0\7\33"+
    "\1\0\1\33\3\0\3\33\1\0\7\33\3\0\4\33\2\0\6\33"+
    "\4\0\15\33\5\0\3\33\1\0\7\33\53\0\1\40\1\40\25\0"+
    "\2\33\23\0\1\33\34\0\1\33\15\0\1\33\20\0\15\33\63\0"+
    "\41\33\21\0\1\33\4\0\1\33\2\0\12\33\1\0\1\33\3\0"+
    "\5\33\6\0\1\33\1\0\1\33\1\0\1\33\1\0\4\33\1\0"+
    "\13\33\2\0\4\33\5\0\5\33\4\0\1\33\21\0\51\33\u032d\0"+
    "\64\33\u0716\0\57\33\1\0\57\33\1\0\205\33\6\0\11\33\14\0"+
    "\46\33\1\0\1\33\5\0\1\33\2\0\70\33\7\0\1\33\17\0"+
    "\30\33\11\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0\40\33\57\0"+
    "\1\33\u01d5\0\3\33\31\0\17\33\1\0\5\33\2\0\5\33\4\0"+
    "\126\33\2\0\2\33\2\0\3\33\1\0\132\33\1\0\4\33\5\0"+
    "\51\33\3\0\136\33\21\0\33\33\65\0\20\33\u0200\0\u19b6\33\112\0"+
    "\u51cd\33\63\0\u048d\33\103\0\56\33\2\0\u010d\33\3\0\20\33\12\27"+
    "\2\33\24\0\63\33\1\0\12\33\1\0\37\33\1\0\123\33\45\0"+
    "\11\33\2\0\147\33\2\0\4\33\1\0\36\33\2\0\2\33\105\0"+
    "\61\33\30\0\64\33\14\0\105\33\13\0\12\27\6\0\30\33\3\0"+
    "\1\33\4\0\12\27\44\33\2\0\44\33\14\0\35\33\3\0\101\33"+
    "\16\0\1\33\12\27\6\0\20\33\12\27\5\33\1\0\67\33\11\0"+
    "\16\33\2\0\12\27\6\0\27\33\3\0\111\33\30\0\3\33\2\0"+
    "\20\33\2\0\5\33\12\0\6\33\2\0\6\33\2\0\6\33\11\0"+
    "\7\33\1\0\7\33\1\0\53\33\1\0\4\33\4\0\2\33\132\0"+
    "\53\33\1\0\2\33\2\0\12\27\6\0\u2ba4\33\14\0\27\33\4\0"+
    "\61\33\u2104\0\u016e\33\2\0\152\33\46\0\7\33\14\0\5\33\5\0"+
    "\14\33\1\0\15\33\1\0\5\33\1\0\1\33\1\0\2\33\1\0"+
    "\2\33\1\0\154\33\41\0\u016b\33\22\0\100\33\2\0\66\33\50\0"+
    "\14\33\4\0\20\33\20\0\16\33\5\0\2\33\30\0\3\33\40\0"+
    "\5\33\1\0\207\33\23\0\12\27\7\0\32\33\4\0\1\33\1\0"+
    "\32\33\13\0\131\33\3\0\6\33\2\0\6\33\2\0\6\33\2\0"+
    "\3\33\43\0\14\33\1\0\32\33\1\0\23\33\1\0\2\33\1\0"+
    "\17\33\2\0\16\33\42\0\173\33\105\0\65\33\210\0\1\33\202\0"+
    "\35\33\3\0\61\33\17\0\1\33\37\0\40\33\20\0\33\33\5\0"+
    "\53\33\5\0\36\33\2\0\44\33\4\0\10\33\1\0\5\33\52\0"+
    "\236\33\2\0\12\27\126\0\50\33\10\0\64\33\234\0\u0137\33\11\0"+
    "\26\33\12\0\10\33\230\0\6\33\2\0\1\33\1\0\54\33\1\0"+
    "\2\33\3\0\1\33\2\0\27\33\12\0\27\33\11\0\37\33\141\0"+
    "\26\33\12\0\32\33\106\0\70\33\6\0\2\33\100\0\4\33\1\0"+
    "\2\33\5\0\10\33\1\0\3\33\1\0\33\33\4\0\3\33\4\0"+
    "\1\33\40\0\35\33\3\0\35\33\43\0\10\33\1\0\36\33\31\0"+
    "\66\33\12\0\26\33\12\0\23\33\15\0\22\33\156\0\111\33\u03b7\0"+
    "\107\33\37\0\12\27\17\0\74\33\25\0\31\33\7\0\12\27\6\0"+
    "\65\33\1\0\12\27\20\0\44\33\2\0\1\33\11\0\105\33\13\0"+
    "\12\27\1\33\45\0\22\33\1\0\45\33\170\0\73\33\5\0\12\27"+
    "\7\0\3\33\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33"+
    "\1\0\2\33\1\0\5\33\2\0\11\33\2\0\2\33\2\0\3\33"+
    "\11\0\1\33\5\0\7\33\2\0\7\33\3\0\5\33\u010b\0\106\33"+
    "\1\0\1\33\10\0\12\27\246\0\66\33\2\0\11\33\77\0\101\33"+
    "\3\0\1\33\13\0\12\27\46\0\70\33\10\0\12\27\u01d6\0\100\33"+
    "\12\27\25\0\1\33\u01c0\0\71\33\u0507\0\u0399\33\147\0\157\33\u0b91\0"+
    "\u042f\33\u33d1\0\u0239\33\7\0\37\33\1\0\12\27\146\0\36\33\2\0"+
    "\5\33\13\0\67\33\11\0\4\33\14\0\12\27\11\0\25\33\5\0"+
    "\23\33\u0370\0\105\33\13\0\57\33\20\0\21\33\u4060\0\2\33\u0bfe\0"+
    "\153\33\5\0\15\33\3\0\11\33\7\0\12\33\3\0\2\33\u14c6\0"+
    "\5\33\3\0\6\33\10\0\10\33\2\0\7\33\36\0\4\33\224\0"+
    "\3\33\u01bb\0\125\33\1\0\107\33\1\0\2\33\2\0\1\33\2\0"+
    "\2\33\2\0\4\33\1\0\14\33\1\0\1\33\1\0\7\33\1\0"+
    "\101\33\1\0\4\33\2\0\10\33\1\0\7\33\1\0\34\33\1\0"+
    "\4\33\1\0\5\33\1\0\1\33\3\0\7\33\1\0\u0154\33\2\0"+
    "\31\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0\37\33\1\0"+
    "\31\33\1\0\37\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\10\33\2\0\62\27\u1000\0\305\33\13\0\7\33\u0529\0\4\33\1\0"+
    "\33\33\1\0\2\33\1\0\1\33\2\0\1\33\1\0\12\33\1\0"+
    "\4\33\1\0\1\33\1\0\1\33\6\0\1\33\4\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\0\3\33\1\0\2\33\1\0\1\33\2\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\2\33\1\0\1\33\2\0\4\33\1\0\7\33\1\0\4\33\1\0"+
    "\4\33\1\0\1\33\1\0\12\33\1\0\21\33\5\0\3\33\1\0"+
    "\5\33\1\0\21\33\u0274\0\32\33\6\0\32\33\6\0\32\33\u0e76\0"+
    "\ua6d7\33\51\0\u1035\33\13\0\336\33\u3fe2\0\u021e\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\33\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\11\3\5\4\1\5\2\1\1\6"+
    "\1\7\7\3\1\0\1\10\1\0\1\11\7\3\1\0"+
    "\2\3\1\0\1\3\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\0\0\0\0\102\0\143\0\204\0\245"+
    "\0\306\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad"+
    "\0\0\0\u01ce\0\u01ef\0\u0210\0\u0231\0\u0252\0\0\0\204"+
    "\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a"+
    "\0\u037b\0\u0231\0\u0231\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420"+
    "\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\41\0\1\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\2\7\1\13\1\14\1\7\1\15\1\16"+
    "\1\7\1\17\1\20\1\21\1\22\2\23\1\24\1\7"+
    "\1\24\1\25\1\3\1\26\1\24\1\27\1\4\2\0"+
    "\1\4\42\0\1\7\1\30\14\7\7\0\2\7\3\0"+
    "\1\7\6\0\16\7\7\0\2\7\3\0\1\7\6\0"+
    "\3\7\1\31\12\7\7\0\2\7\3\0\1\7\6\0"+
    "\5\7\1\32\1\33\7\7\7\0\2\7\3\0\1\7"+
    "\6\0\4\7\1\34\11\7\7\0\2\7\3\0\1\7"+
    "\6\0\12\7\1\30\3\7\7\0\2\7\3\0\1\7"+
    "\6\0\3\7\1\35\12\7\7\0\2\7\3\0\1\7"+
    "\6\0\14\7\1\36\1\7\7\0\2\7\3\0\1\7"+
    "\6\0\4\7\1\37\11\7\7\0\2\7\3\0\1\7"+
    "\24\0\1\21\41\0\1\21\41\0\1\40\1\41\41\0"+
    "\1\21\42\0\1\24\1\0\1\24\3\0\1\24\3\0"+
    "\1\42\2\0\27\42\1\43\6\42\35\0\1\27\6\0"+
    "\4\7\1\44\11\7\7\0\2\7\3\0\1\7\6\0"+
    "\10\7\1\45\5\7\7\0\2\7\3\0\1\7\6\0"+
    "\7\7\1\46\6\7\7\0\2\7\3\0\1\7\6\0"+
    "\11\7\1\47\4\7\7\0\2\7\3\0\1\7\6\0"+
    "\1\50\15\7\7\0\2\7\3\0\1\7\6\0\1\51"+
    "\15\7\7\0\2\7\3\0\1\7\6\0\15\7\1\52"+
    "\7\0\2\7\3\0\1\7\6\0\16\53\6\0\3\53"+
    "\1\0\1\53\1\0\1\53\3\0\1\41\2\0\36\41"+
    "\3\0\5\7\1\30\10\7\7\0\2\7\3\0\1\7"+
    "\6\0\1\6\10\7\1\14\4\7\7\0\2\7\3\0"+
    "\1\7\6\0\4\7\1\30\11\7\7\0\2\7\3\0"+
    "\1\7\6\0\6\7\1\54\7\7\7\0\2\7\3\0"+
    "\1\7\6\0\6\7\1\46\7\7\7\0\2\7\3\0"+
    "\1\7\6\0\5\7\1\55\10\7\7\0\2\7\3\0"+
    "\1\7\6\0\10\7\1\30\5\7\7\0\2\7\3\0"+
    "\1\7\26\0\1\56\20\0\1\57\15\7\7\0\2\7"+
    "\3\0\1\7\6\0\2\7\1\30\13\7\7\0\2\7"+
    "\3\0\1\7\27\0\1\60\17\0\5\7\1\46\10\7"+
    "\7\0\2\7\3\0\1\7\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\1\0\2\11\14\1\1\11\5\1\1\11\10\1"+
    "\1\0\1\1\1\0\10\1\1\0\2\1\1\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	 private ArrayList<String> list= new ArrayList();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yybegin( FIRST ); 
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2686) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println( "Invalid character \"" + yytext() + "\"" );
            }
          case 10: break;
          case 2: 
            { 
            }
          case 11: break;
          case 3: 
            { if(list.contains(yytext()))
        {
            System.out.println( "Identifier "+yytext() +" already exists");
        }
        else
        {
            System.out.println( "New Identifier :\t" + yytext() );
            list.add(yytext());
        }
            }
          case 12: break;
          case 4: 
            { System.out.println( "Operator :\t" + yytext()  );
            }
          case 13: break;
          case 5: 
            { System.out.println( "Integer :\t" + yytext()  );
            }
          case 14: break;
          case 6: 
            { if(yytext().equals(";"))
        {
            System.out.println( "Semicolon :\t" + yytext()  ); 
        }
        else
        {
            System.out.println( "Bracket :\t" + yytext()  ); 
        }
            }
          case 15: break;
          case 7: 
            { System.out.println( "Keyword :\t" + yytext()  );
            }
          case 16: break;
          case 8: 
            { System.out.println( "Comment :\t" + yytext()  );
            }
          case 17: break;
          case 9: 
            { System.out.println( "String :\t" + yytext()  );
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
